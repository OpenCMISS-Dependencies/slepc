        subroutine BVOrthogonalizeVec(bv, v, H, norm, lindep ,ierr)
       BV bv ! BV
       Vec v ! Vec
       PetscScalar H ! PetscScalar
       PetscReal norm ! PetscReal
       PetscBool lindep ! PetscBool
       integer ierr
       end subroutine
        subroutine BVOrthogonalizeColumn(bv, j, H, norm, lindep ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       PetscScalar H ! PetscScalar
       PetscReal norm ! PetscReal
       PetscBool lindep ! PetscBool
       integer ierr
       end subroutine
        subroutine BVOrthogonalizeSomeColumn(bv, j, which, H, norm,     &
     &lindep ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       PetscBool which ! PetscBool
       PetscScalar H ! PetscScalar
       PetscReal norm ! PetscReal
       PetscBool lindep ! PetscBool
       integer ierr
       end subroutine
        subroutine BVOrthogonalize(V, R ,ierr)
       BV V ! BV
       Mat R ! Mat
       integer ierr
       end subroutine
        subroutine BVMult(Y, alpha, beta, X, Q ,ierr)
       BV Y ! BV
       PetscScalar alpha ! PetscScalar
       PetscScalar beta ! PetscScalar
       BV X ! BV
       Mat Q ! Mat
       integer ierr
       end subroutine
        subroutine BVMultVec(X, alpha, beta, y, q ,ierr)
       BV X ! BV
       PetscScalar alpha ! PetscScalar
       PetscScalar beta ! PetscScalar
       Vec y ! Vec
       PetscScalar q ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVMultColumn(X, alpha, beta, j, q ,ierr)
       BV X ! BV
       PetscScalar alpha ! PetscScalar
       PetscScalar beta ! PetscScalar
       PetscInt j ! PetscInt
       PetscScalar q ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVMultInPlace(V, Q, s, e ,ierr)
       BV V ! BV
       Mat Q ! Mat
       PetscInt s ! PetscInt
       PetscInt e ! PetscInt
       integer ierr
       end subroutine
        subroutine BVMultInPlaceTranspose(V, Q, s, e ,ierr)
       BV V ! BV
       Mat Q ! Mat
       PetscInt s ! PetscInt
       PetscInt e ! PetscInt
       integer ierr
       end subroutine
        subroutine BVScale(bv, alpha ,ierr)
       BV bv ! BV
       PetscScalar alpha ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVScaleColumn(bv, j, alpha ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       PetscScalar alpha ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVSetRandom(bv, rctx ,ierr)
       BV bv ! BV
       PetscRandom rctx ! PetscRandom
       integer ierr
       end subroutine
        subroutine BVSetRandomColumn(bv, j, rctx ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       PetscRandom rctx ! PetscRandom
       integer ierr
       end subroutine
        subroutine BVMatMult(V, A, Y ,ierr)
       BV V ! BV
       Mat A ! Mat
       BV Y ! BV
       integer ierr
       end subroutine
        subroutine BVMatMultHermitianTranspose(V, A, Y ,ierr)
       BV V ! BV
       Mat A ! Mat
       BV Y ! BV
       integer ierr
       end subroutine
        subroutine BVMatMultColumn(V, A, j ,ierr)
       BV V ! BV
       Mat A ! Mat
       PetscInt j ! PetscInt
       integer ierr
       end subroutine
        subroutine BVDot(X, Y, M ,ierr)
       BV X ! BV
       BV Y ! BV
       Mat M ! Mat
       integer ierr
       end subroutine
        subroutine BVDotVec(X, y, m ,ierr)
       BV X ! BV
       Vec y ! Vec
       PetscScalar m ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVDotVecBegin(X, y, m ,ierr)
       BV X ! BV
       Vec y ! Vec
       PetscScalar m ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVDotVecEnd(X, y, m ,ierr)
       BV X ! BV
       Vec y ! Vec
       PetscScalar m ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVDotColumn(X, j, m ,ierr)
       BV X ! BV
       PetscInt j ! PetscInt
       PetscScalar m ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVDotColumnBegin(X, j, m ,ierr)
       BV X ! BV
       PetscInt j ! PetscInt
       PetscScalar m ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVDotColumnEnd(X, j, m ,ierr)
       BV X ! BV
       PetscInt j ! PetscInt
       PetscScalar m ! PetscScalar
       integer ierr
       end subroutine
        subroutine BVNorm(bv, type, val ,ierr)
       BV bv ! BV
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVNormVec(bv, v, type, val ,ierr)
       BV bv ! BV
       Vec v ! Vec
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVNormVecBegin(bv, v, type, val ,ierr)
       BV bv ! BV
       Vec v ! Vec
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVNormVecEnd(bv, v, type, val ,ierr)
       BV bv ! BV
       Vec v ! Vec
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVNormColumn(bv, j, type, val ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVNormColumnBegin(bv, j, type, val ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVNormColumnEnd(bv, j, type, val ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       NormType type ! NormType
       PetscReal val ! PetscReal
       integer ierr
       end subroutine
        subroutine BVMatProject(X, A, Y, M ,ierr)
       BV X ! BV
       Mat A ! Mat
       BV Y ! BV
       Mat M ! Mat
       integer ierr
       end subroutine
        subroutine BVDestroy(bv ,ierr)
       BV bv ! BV
       integer ierr
       end subroutine
        subroutine BVCreate(comm, newbv ,ierr)
       integer comm ! MPI_Comm
       BV newbv ! BV
       integer ierr
       end subroutine
        subroutine BVInsertVec(V, j, w ,ierr)
       BV V ! BV
       PetscInt j ! PetscInt
       Vec w ! Vec
       integer ierr
       end subroutine
        subroutine BVInsertVecs(V, s, m, W, orth ,ierr)
       BV V ! BV
       PetscInt s ! PetscInt
       PetscInt m ! PetscInt
       Vec W ! Vec
       PetscBool orth ! PetscBool
       integer ierr
       end subroutine
        subroutine BVInsertConstraints(V, nc, C ,ierr)
       BV V ! BV
       PetscInt nc ! PetscInt
       Vec C ! Vec
       integer ierr
       end subroutine
        subroutine BVSetSizes(bv, n, nupper, m ,ierr)
       BV bv ! BV
       PetscInt n ! PetscInt
       PetscInt nupper ! PetscInt
       PetscInt m ! PetscInt
       integer ierr
       end subroutine
        subroutine BVSetSizesFromVec(bv, t, m ,ierr)
       BV bv ! BV
       Vec t ! Vec
       PetscInt m ! PetscInt
       integer ierr
       end subroutine
        subroutine BVGetSizes(bv, n, nupper, m ,ierr)
       BV bv ! BV
       PetscInt n ! PetscInt
       PetscInt nupper ! PetscInt
       PetscInt m ! PetscInt
       integer ierr
       end subroutine
        subroutine BVSetNumConstraints(V, nc ,ierr)
       BV V ! BV
       PetscInt nc ! PetscInt
       integer ierr
       end subroutine
        subroutine BVGetNumConstraints(bv, nc ,ierr)
       BV bv ! BV
       PetscInt nc ! PetscInt
       integer ierr
       end subroutine
        subroutine BVResize(bv, m, copy ,ierr)
       BV bv ! BV
       PetscInt m ! PetscInt
       PetscBool copy ! PetscBool
       integer ierr
       end subroutine
        subroutine BVSetActiveColumns(bv, l, k ,ierr)
       BV bv ! BV
       PetscInt l ! PetscInt
       PetscInt k ! PetscInt
       integer ierr
       end subroutine
        subroutine BVGetActiveColumns(bv, l, k ,ierr)
       BV bv ! BV
       PetscInt l ! PetscInt
       PetscInt k ! PetscInt
       integer ierr
       end subroutine
        subroutine BVSetMatrix(bv, B, indef ,ierr)
       BV bv ! BV
       Mat B ! Mat
       PetscBool indef ! PetscBool
       integer ierr
       end subroutine
        subroutine BVGetMatrix(bv, B, indef ,ierr)
       BV bv ! BV
       Mat B ! Mat
       PetscBool indef ! PetscBool
       integer ierr
       end subroutine
        subroutine BVApplyMatrix(bv, x, y ,ierr)
       BV bv ! BV
       Vec x ! Vec
       Vec y ! Vec
       integer ierr
       end subroutine
        subroutine BVApplyMatrixBV(X, Y ,ierr)
       BV X ! BV
       BV Y ! BV
       integer ierr
       end subroutine
        subroutine BVGetCachedBV(bv, cached ,ierr)
       BV bv ! BV
       BV cached ! BV
       integer ierr
       end subroutine
        subroutine BVSetSignature(bv, omega ,ierr)
       BV bv ! BV
       Vec omega ! Vec
       integer ierr
       end subroutine
        subroutine BVGetSignature(bv, omega ,ierr)
       BV bv ! BV
       Vec omega ! Vec
       integer ierr
       end subroutine
        subroutine BVSetFromOptions(bv ,ierr)
       BV bv ! BV
       integer ierr
       end subroutine
        subroutine BVSetOrthogonalization(bv, type, refine, eta, block ,&
     &ierr)
       BV bv ! BV
       BVOrthogType type ! BVOrthogType
       BVOrthogRefineType refine ! BVOrthogRefineType
       PetscReal eta ! PetscReal
       BVOrthogBlockType block ! BVOrthogBlockType
       integer ierr
       end subroutine
        subroutine BVGetOrthogonalization(bv, type, refine, eta, block ,&
     &ierr)
       BV bv ! BV
       BVOrthogType type ! BVOrthogType
       BVOrthogRefineType refine ! BVOrthogRefineType
       PetscReal eta ! PetscReal
       BVOrthogBlockType block ! BVOrthogBlockType
       integer ierr
       end subroutine
        subroutine BVSetMatMultMethod(bv, method ,ierr)
       BV bv ! BV
       BVMatMultType method ! BVMatMultType
       integer ierr
       end subroutine
        subroutine BVGetMatMultMethod(bv, method ,ierr)
       BV bv ! BV
       BVMatMultType method ! BVMatMultType
       integer ierr
       end subroutine
        subroutine BVGetColumn(bv, j, v ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       Vec v ! Vec
       integer ierr
       end subroutine
        subroutine BVRestoreColumn(bv, j, v ,ierr)
       BV bv ! BV
       PetscInt j ! PetscInt
       Vec v ! Vec
       integer ierr
       end subroutine
        subroutine BVCreateVec(bv, v ,ierr)
       BV bv ! BV
       Vec v ! Vec
       integer ierr
       end subroutine
        subroutine BVDuplicate(V, W ,ierr)
       BV V ! BV
       BV W ! BV
       integer ierr
       end subroutine
        subroutine BVDuplicateResize(V, m, W ,ierr)
       BV V ! BV
       PetscInt m ! PetscInt
       BV W ! BV
       integer ierr
       end subroutine
        subroutine BVCopy(V, W ,ierr)
       BV V ! BV
       BV W ! BV
       integer ierr
       end subroutine
        subroutine BVCopyVec(V, j, w ,ierr)
       BV V ! BV
       PetscInt j ! PetscInt
       Vec w ! Vec
       integer ierr
       end subroutine
        subroutine BVCopyColumn(V, j, i ,ierr)
       BV V ! BV
       PetscInt j ! PetscInt
       PetscInt i ! PetscInt
       integer ierr
       end subroutine
